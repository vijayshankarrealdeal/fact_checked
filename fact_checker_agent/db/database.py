# fact_checker_agent/db/database.py

import os
import asyncio
from google.adk.sessions import DatabaseSessionService
from dotenv import load_dotenv
from fact_checker_agent.logger import get_logger, log_info, log_success, log_warning

load_dotenv()
logger = get_logger(__name__)

# --- Database Configuration (Unchanged) ---
DB_URL = os.getenv("DATABASE_URL")

# --- Session Service Initialization (Unchanged) ---
session_service = DatabaseSessionService(db_url="sqlite:///data.sqlite")


# --- Core Async Functions ---
async def list_sessions(user_id: str):
    """Lists all sessions for a given user."""
    log_info(logger, f"DB: Listing sessions for user_id: {user_id}")
    return await session_service.list_sessions(
        app_name="FactCheckerADK", user_id=user_id
    )

async def get_session(session_id: str, user_id: str):
    """Retrieves a specific session by its ID. Returns None if not found."""
    log_info(logger, f"DB: Attempting to get session_id: {session_id} for user_id: {user_id}")
    return await session_service.get_session(
        app_name="FactCheckerADK", user_id=user_id, session_id=session_id
    )

async def create_new_session(user_id: str):
    """Creates a new session with a random ID generated by ADK."""
    log_info(logger, f"DB: Creating new random session for user_id: {user_id}")
    initial_state = {
        "user_name": user_id, "search_query": "", "gathered_urls": {},
        "web_analysis": "", "video_analysis": "", "final_fact_check_result": {},
    }
    return await session_service.create_session(
        app_name="FactCheckerADK", user_id=user_id, state=initial_state
    )

# --- ASYNC and SYNC Functions ---

async def get_session_history_async(session_id: str, user_id: str):
    """Asynchronously retrieves chat history."""
    log_info(logger, f"DB: Retrieving session history for session_id: {session_id}")
    session = await get_session(session_id, user_id)
    history = []
    if session and session.state:
        # Simplified history retrieval for clarity
        if 'search_query' in session.state and 'final_fact_check_result' in session.state:
             history.append({
                "user": session.state['search_query'],
                "ai_response":session.state['final_fact_check_result']
            })
    log_success(logger, f"DB: Found {len(history)} entries in history for session_id: {session_id}")
    return history


async def ensure_session_exists_async(session_id: str, user_id: str):
    """
    Asynchronously and reliably checks if a session exists. If not, it creates it.
    """
    log_info(logger, f"DB: Ensuring session '{session_id}' exists for user '{user_id}'.")
    existing_session = await get_session(session_id, user_id)

    if existing_session is None:
        log_warning(logger, f"DB: Session '{session_id}' not found. Creating it now.")
        initial_state = {
            "user_name": user_id, "search_query": "", "gathered_urls": {},
            "web_analysis": "", "video_analysis": "", "final_fact_check_result": {},
        }
        await session_service.create_session(
            app_name="FactCheckerADK",
            user_id=user_id,
            state=initial_state,
            session_id=session_id
        )
        log_success(logger, f"DB: Successfully created session with specific ID '{session_id}'.")
    else:
        log_success(logger, f"DB: Session '{session_id}' found. Proceeding with query.")


def get_session_history_sync(session_id: str, user_id: str):
    """Synchronous wrapper to retrieve chat history."""
    return asyncio.run(get_session_history_async(session_id, user_id))

def list_sessions_sync(user_id: str):
    """Synchronous wrapper to list sessions."""
    return asyncio.run(list_sessions(user_id))